/* tslint:disable */
/* eslint-disable */
/**
 * Chechkach API
 * Some description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CreateLobbyDto
 */
export interface CreateLobbyDto {
    /**
     * The name of the lobby
     * @type {string}
     * @memberof CreateLobbyDto
     */
    'lobbyName': string;
    /**
     * Password to enter the lobby
     * @type {string}
     * @memberof CreateLobbyDto
     */
    'password'?: string;
    /**
     * Private lobbies are hidden from the lobby list
     * @type {boolean}
     * @memberof CreateLobbyDto
     */
    'private'?: boolean;
}
/**
 * 
 * @export
 * @interface GameState
 */
export interface GameState {
    /**
     * 
     * @type {number}
     * @memberof GameState
     */
    'totalRounds': number;
    /**
     * 
     * @type {number}
     * @memberof GameState
     */
    'roundNo': number;
    /**
     * 
     * @type {string}
     * @memberof GameState
     */
    'drawingUser': string;
    /**
     * 
     * @type {string}
     * @memberof GameState
     */
    'wordToGuess': string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof GameState
     */
    'roundWinners': Array<string>;
    /**
     * 
     * @type {number}
     * @memberof GameState
     */
    'roundEndTimeStamp': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof GameState
     */
    'canvas': Array<string>;
    /**
     * 
     * @type {Array<Hint>}
     * @memberof GameState
     */
    'hints': Array<Hint>;
}
/**
 * 
 * @export
 * @interface Hint
 */
export interface Hint {
    /**
     * 
     * @type {number}
     * @memberof Hint
     */
    'index': number;
    /**
     * 
     * @type {string}
     * @memberof Hint
     */
    'word': string;
}
/**
 * 
 * @export
 * @interface JoinLobbyDto
 */
export interface JoinLobbyDto {
    /**
     * The name of the lobby the player is attempting to join
     * @type {string}
     * @memberof JoinLobbyDto
     */
    'lobbyName': string;
    /**
     * The socketId that the players last used
     * @type {string}
     * @memberof JoinLobbyDto
     */
    'lastKnownSocketId'?: string;
}
/**
 * 
 * @export
 * @interface Lobby
 */
export interface Lobby {
    /**
     * 
     * @type {string}
     * @memberof Lobby
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Lobby
     */
    'status': string;
    /**
     * 
     * @type {Array<Player>}
     * @memberof Lobby
     */
    'players': Array<Player>;
    /**
     * 
     * @type {GameState}
     * @memberof Lobby
     */
    'gameState': GameState;
}
/**
 * 
 * @export
 * @interface Player
 */
export interface Player {
    /**
     * 
     * @type {string}
     * @memberof Player
     */
    'playerId': string;
    /**
     * 
     * @type {string}
     * @memberof Player
     */
    'socketId': string;
    /**
     * 
     * @type {boolean}
     * @memberof Player
     */
    'connected': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Player
     */
    'isOwner': boolean;
    /**
     * 
     * @type {number}
     * @memberof Player
     */
    'score': number;
}

/**
 * LobbiesApi - axios parameter creator
 * @export
 */
export const LobbiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateLobbyDto} createLobbyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (createLobbyDto: CreateLobbyDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createLobbyDto' is not null or undefined
            assertParamExists('create', 'createLobbyDto', createLobbyDto)
            const localVarPath = `/api/lobbies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createLobbyDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/lobbies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} lobbyName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOne: async (lobbyName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'lobbyName' is not null or undefined
            assertParamExists('findOne', 'lobbyName', lobbyName)
            const localVarPath = `/api/lobbies/{lobbyName}`
                .replace(`{${"lobbyName"}}`, encodeURIComponent(String(lobbyName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {JoinLobbyDto} joinLobbyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        join: async (joinLobbyDto: JoinLobbyDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'joinLobbyDto' is not null or undefined
            assertParamExists('join', 'joinLobbyDto', joinLobbyDto)
            const localVarPath = `/api/lobbies/join`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(joinLobbyDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LobbiesApi - functional programming interface
 * @export
 */
export const LobbiesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LobbiesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateLobbyDto} createLobbyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(createLobbyDto: CreateLobbyDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Lobby>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(createLobbyDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LobbiesApi.create']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Lobby>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LobbiesApi.findAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} lobbyName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findOne(lobbyName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Lobby>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findOne(lobbyName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LobbiesApi.findOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {JoinLobbyDto} joinLobbyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async join(joinLobbyDto: JoinLobbyDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Lobby>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.join(joinLobbyDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LobbiesApi.join']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LobbiesApi - factory interface
 * @export
 */
export const LobbiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LobbiesApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateLobbyDto} createLobbyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(createLobbyDto: CreateLobbyDto, options?: RawAxiosRequestConfig): AxiosPromise<Lobby> {
            return localVarFp.create(createLobbyDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<Lobby>> {
            return localVarFp.findAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} lobbyName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOne(lobbyName: string, options?: RawAxiosRequestConfig): AxiosPromise<Lobby> {
            return localVarFp.findOne(lobbyName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {JoinLobbyDto} joinLobbyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        join(joinLobbyDto: JoinLobbyDto, options?: RawAxiosRequestConfig): AxiosPromise<Lobby> {
            return localVarFp.join(joinLobbyDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LobbiesApi - object-oriented interface
 * @export
 * @class LobbiesApi
 * @extends {BaseAPI}
 */
export class LobbiesApi extends BaseAPI {
    /**
     * 
     * @param {CreateLobbyDto} createLobbyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LobbiesApi
     */
    public create(createLobbyDto: CreateLobbyDto, options?: RawAxiosRequestConfig) {
        return LobbiesApiFp(this.configuration).create(createLobbyDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LobbiesApi
     */
    public findAll(options?: RawAxiosRequestConfig) {
        return LobbiesApiFp(this.configuration).findAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} lobbyName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LobbiesApi
     */
    public findOne(lobbyName: string, options?: RawAxiosRequestConfig) {
        return LobbiesApiFp(this.configuration).findOne(lobbyName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {JoinLobbyDto} joinLobbyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LobbiesApi
     */
    public join(joinLobbyDto: JoinLobbyDto, options?: RawAxiosRequestConfig) {
        return LobbiesApiFp(this.configuration).join(joinLobbyDto, options).then((request) => request(this.axios, this.basePath));
    }
}



